{:highlights [{:id #uuid "63b3ac7f-1c4c-4e20-8727-a590e7d55af6", :page 8, :position {:bounding {:x1 120, :y1 115, :x2 207.17977905273438, :y2 139, :width 992.1333333333332, :height 1403.1499999999999}, :rects ({:x1 120, :y1 115, :x2 207.17977905273438, :y2 139, :width 992.1333333333332, :height 1403.1499999999999}), :page 8}, :content {:text "Preface"}, :properties {:color "red"}} {:id #uuid "63b3ac90-e426-4077-89f5-a95822c71f27", :page 8, :position {:bounding {:x1 120, :y1 179.421875, :x2 243.42926025390625, :y2 199.421875, :width 992.1333333333332, :height 1403.1499999999999}, :rects ({:x1 120, :y1 179.421875, :x2 243.42926025390625, :y2 199.421875, :width 992.1333333333332, :height 1403.1499999999999}), :page 8}, :content {:text "Introduction"}, :properties {:color "yellow"}} {:id #uuid "63b3b1ca-06e2-4e62-93aa-01a53c266d4c", :page 9, :position {:bounding {:x1 163.1875, :y1 1442.1875, :x2 735.838134765625, :y2 1475.1875, :width 1349.3013333333333, :height 1908.2839999999999}, :rects ({:x1 163.1875, :y1 1442.1875, :x2 735.838134765625, :y2 1475.1875, :width 1349.3013333333333, :height 1908.2839999999999}), :page 9}, :content {:text "Chapter 01: Towards Modern C++"}, :properties {:color "red"}} {:id #uuid "63b3b1db-dbd6-4a56-addd-addb5e838959", :page 9, :position {:bounding {:x1 208.359375, :y1 1528.375, :x2 504.703857421875, :y2 1550.375, :width 1349.3013333333333, :height 1908.2839999999999}, :rects ({:x1 208.359375, :y1 1528.375, :x2 504.703857421875, :y2 1550.375, :width 1349.3013333333333, :height 1908.2839999999999}), :page 9}, :content {:text "Compilation Environment"}, :properties {:color "yellow"}} {:id #uuid "63b3b571-10ca-47af-af76-f442cef7c480", :page 10, :position {:bounding {:x1 163.1875, :y1 292.375, :x2 486.728271484375, :y2 319.375, :width 1349.3013333333333, :height 1908.2839999999999}, :rects ({:x1 163.1875, :y1 292.375, :x2 486.728271484375, :y2 319.375, :width 1349.3013333333333, :height 1908.2839999999999}), :page 10}, :content {:text "1.1 Deprecated Features"}, :properties {:color "yellow"}} {:id #uuid "63b3b583-e868-440a-b053-973dae452e54", :page 10, :position {:bounding {:x1 0, :y1 158, :x2 1186.0977783203125, :y2 768.84375, :width 1349.3013333333333, :height 1908.2839999999999}, :rects ({:x1 0, :y1 158, :x2 0, :y2 178, :width 1349.3013333333333, :height 1908.2839999999999} {:x1 0, :y1 174, :x2 0, :y2 194, :width 1349.3013333333333, :height 1908.2839999999999} {:x1 219.640625, :y1 670.390625, :x2 1186.0977783203125, :y2 692.96875, :width 1349.3013333333333, :height 1908.2839999999999} {:x1 219.640625, :y1 708.328125, :x2 1186.09326171875, :y2 730.90625, :width 1349.3013333333333, :height 1908.2839999999999} {:x1 219.640625, :y1 746.265625, :x2 390.484375, :y2 768.84375, :width 1349.3013333333333, :height 1908.2839999999999}), :page 10}, :content {:text "The string literal constant is no longer allowed to be assigned to a char *. If you need to assign and initialize a char * with a string literal constant, you should use const char * or auto."}, :properties {:color "yellow"}} {:id #uuid "63b3b5da-758a-4944-a237-049a2b0b81d1", :page 10, :position {:bounding {:x1 0, :y1 222, :x2 1186.06640625, :y2 927.828125, :width 1349.3013333333333, :height 1908.2839999999999}, :rects ({:x1 0, :y1 222, :x2 0, :y2 242, :width 1349.3013333333333, :height 1908.2839999999999} {:x1 219.640625, :y1 867.3125, :x2 1186.06640625, :y2 889.890625, :width 1349.3013333333333, :height 1908.2839999999999} {:x1 219.640625, :y1 905.25, :x2 778.484375, :y2 927.828125, :width 1349.3013333333333, :height 1908.2839999999999}), :page 10}, :content {:text "C++98 exception description, unexpected_handler, set_unexpected() and other related features are deprecated and should use noexcept."}, :properties {:color "yellow"}} {:id #uuid "63b3b5dc-757d-4756-a14e-15026417afd9", :page 10, :position {:bounding {:x1 219.640625, :y1 961.25, :x2 835.4942016601562, :y2 983.828125, :width 1349.3013333333333, :height 1908.2839999999999}, :rects ({:x1 219.640625, :y1 961.25, :x2 835.4942016601562, :y2 983.828125, :width 1349.3013333333333, :height 1908.2839999999999}), :page 10}, :content {:text "auto_ptr is deprecated and unique_ptr should be used."}, :properties {:color "yellow"}} {:id #uuid "63b3b5e2-ba20-4b53-a21e-6856ecc09869", :page 10, :position {:bounding {:x1 219.640625, :y1 806.78125, :x2 978.405517578125, :y2 829.359375, :width 1349.3013333333333, :height 1908.2839999999999}, :rects ({:x1 219.640625, :y1 806.78125, :x2 978.405517578125, :y2 829.359375, :width 1349.3013333333333, :height 1908.2839999999999}), :page 10}, :content {:text "char *str = \"hello world!\"; // A deprecation warning will appear"}, :properties {:color "yellow"}} {:id #uuid "63b3b623-375d-4006-90e2-4f7ddf7b1e20", :page 10, :position {:bounding {:x1 0, :y1 270, :x2 1186.0826416015625, :y2 1077.1875, :width 1349.3013333333333, :height 1908.2839999999999}, :rects ({:x1 0, :y1 270, :x2 0, :y2 290, :width 1349.3013333333333, :height 1908.2839999999999} {:x1 219.640625, :y1 1017.25, :x2 1186.0826416015625, :y2 1039.828125, :width 1349.3013333333333, :height 1908.2839999999999} {:x1 219.640625, :y1 1055.1875, :x2 322.05877685546875, :y2 1077.1875, :width 1349.3013333333333, :height 1908.2839999999999}), :page 10}, :content {:text "register keyword is deprecated and can be used but no longer has any practical meaning."}, :properties {:color "yellow"}} {:id #uuid "63b3b62f-1ed2-4753-b2a4-ea51bfe8b37a", :page 10, :position {:bounding {:x1 219.640625, :y1 1111.1875, :x2 768.5311279296875, :y2 1133.765625, :width 1349.3013333333333, :height 1908.2839999999999}, :rects ({:x1 219.640625, :y1 1111.1875, :x2 768.5311279296875, :y2 1133.765625, :width 1349.3013333333333, :height 1908.2839999999999}), :page 10}, :content {:text "The ++ operation of the bool type is deprecated."}, :properties {:color "yellow"}} {:id #uuid "63b3b67a-9faa-453f-b7e2-28a4fc278ad6", :page 10, :position {:bounding {:x1 0, :y1 318, :x2 1186.06689453125, :y2 1227.140625, :width 1349.3013333333333, :height 1908.2839999999999}, :rects ({:x1 0, :y1 318, :x2 0, :y2 338, :width 1349.3013333333333, :height 1908.2839999999999} {:x1 219.640625, :y1 1167.203125, :x2 1186.06689453125, :y2 1189.203125, :width 1349.3013333333333, :height 1908.2839999999999} {:x1 219.640625, :y1 1205.140625, :x2 705.0167846679688, :y2 1227.140625, :width 1349.3013333333333, :height 1908.2839999999999}), :page 10}, :content {:text "If a class has a destructor, the properties for which it generates copy constructors and copy assignment operators are deprecated."}, :properties {:color "yellow"}} {:id #uuid "63b3b6d6-0800-42ca-95bd-bf184ef6c1e0", :page 10, :position {:bounding {:x1 0, :y1 350, :x2 1190.44677734375, :y2 1359.015625, :width 1349.3013333333333, :height 1908.2839999999999}, :rects ({:x1 0, :y1 350, :x2 0, :y2 370, :width 1349.3013333333333, :height 1908.2839999999999} {:x1 0, :y1 366, :x2 0, :y2 386, :width 1349.3013333333333, :height 1908.2839999999999} {:x1 219.640625, :y1 1261.140625, :x2 1190.44677734375, :y2 1283.71875, :width 1349.3013333333333, :height 1908.2839999999999} {:x1 219.640625, :y1 1299.078125, :x2 1190.438720703125, :y2 1321.65625, :width 1349.3013333333333, :height 1908.2839999999999} {:x1 219.640625, :y1 1337.015625, :x2 271.7173767089844, :y2 1359.015625, :width 1349.3013333333333, :height 1908.2839999999999}), :page 10}, :content {:text "C language style type conversion is deprecated (ie using (convert_type)) before variables, and static_cast, reinterpret_cast, const_cast should be used for type conversion."}, :properties {:color "yellow"}} {:id #uuid "63b3b85b-b6f0-4695-bfca-2710b58f9651", :page 10, :position {:bounding {:x1 0, :y1 398, :x2 1258.3817138671875, :y2 1578.296875, :width 1428.6719999999998, :height 2020.5359999999998}, :rects ({:x1 0, :y1 398, :x2 0, :y2 418, :width 1428.6719999999998, :height 2020.5359999999998} {:x1 0, :y1 414, :x2 0, :y2 434, :width 1428.6719999999998, :height 2020.5359999999998} {:x1 232.5625, :y1 1473.953125, :x2 1255.828857421875, :y2 1497.953125, :width 1428.6719999999998, :height 2020.5359999999998} {:x1 232.5625, :y1 1514.125, :x2 1258.3817138671875, :y2 1538.125, :width 1428.6719999999998, :height 2020.5359999999998} {:x1 232.5625, :y1 1554.296875, :x2 275.7039489746094, :y2 1578.296875, :width 1428.6719999999998, :height 2020.5359999999998}), :page 10}, :content {:text "In particular, some of the C standard libraries that can be used are deprecated in the latest C++17 standard, such as <ccomplex>, <cstdalign>, <cstdbool> and <ctgmath> etc."}, :properties {:color "yellow"}} {:id #uuid "63b3b8fc-4180-43db-8130-559fcb54495b", :page 10, :position {:bounding {:x1 0, :y1 462, :x2 1255.8665771484375, :y2 1759.0625, :width 1428.6719999999998, :height 2020.5359999999998}, :rects ({:x1 0, :y1 462, :x2 0, :y2 482, :width 1428.6719999999998, :height 2020.5359999999998} {:x1 220.609375, :y1 1694.890625, :x2 1255.8665771484375, :y2 1718.890625, :width 1428.6719999999998, :height 2020.5359999999998} {:x1 172.796875, :y1 1735.0625, :x2 699.1237182617188, :y2 1759.0625, :width 1428.6719999999998, :height 2020.5359999999998}), :page 10}, :content {:text "There are also other features such as parameter binding (C++11 provides std::bind and std::function), export etc. are also deprecated"}, :properties {:color "yellow"}} {:id #uuid "63b3b904-1dd7-471f-9778-fb9d346895b4", :page 10, :position {:bounding {:x1 0, :y1 478, :x2 1256.439697265625, :y2 1839.390625, :width 1428.6719999999998, :height 2020.5359999999998}, :rects ({:x1 0, :y1 478, :x2 0, :y2 498, :width 1428.6719999999998, :height 2020.5359999999998} {:x1 0, :y1 494, :x2 0, :y2 514, :width 1428.6719999999998, :height 2020.5359999999998} {:x1 709.8006591796875, :y1 1735.0625, :x2 1256.439697265625, :y2 1759.0625, :width 1428.6719999999998, :height 2020.5359999999998} {:x1 172.796875, :y1 1775.234375, :x2 1255.8436279296875, :y2 1799.234375, :width 1428.6719999999998, :height 2020.5359999999998} {:x1 172.796875, :y1 1815.390625, :x2 730.1439208984375, :y2 1839.390625, :width 1428.6719999999998, :height 2020.5359999999998}), :page 10}, :content {:text " These features mentioned above If you have never used or heard of it, please don’t try to understand them. You should move closer to the new standard and learn new features directly."}, :properties {:color "purple"}} {:id #uuid "63b3baf0-4ca1-41fd-95cb-0dde91f98d4a", :page 11, :position {:bounding {:x1 172.796875, :y1 951.609375, :x2 547.9658813476562, :y2 980.609375, :width 1428.6719999999998, :height 2020.5359999999998}, :rects ({:x1 172.796875, :y1 951.609375, :x2 547.9658813476562, :y2 980.609375, :width 1428.6719999999998, :height 2020.5359999999998}), :page 11}, :content {:text "1.2 Compatibilities with C"}, :properties {:color "yellow"}} {:id #uuid "63b3bbea-333f-405f-8f99-869f765c8d6b", :page 11, :position {:bounding {:x1 220.609375, :y1 1286.828125, :x2 1200.6090087890625, :y2 1310.828125, :width 1428.6719999999998, :height 2020.5359999999998}, :rects ({:x1 220.609375, :y1 1286.828125, :x2 1200.6090087890625, :y2 1310.828125, :width 1428.6719999999998, :height 2020.5359999999998}), :page 11}, :content {:text "From now on, you should have the idea that “C++ is not a superset of C” in your mind"}, :properties {:color "yellow"}} {:id #uuid "63b3bc10-6b04-40b0-b5d2-3da6066a2859", :page 11, :position {:bounding {:x1 259.016357421875, :y1 1367.171875, :x2 1260.509521484375, :y2 1391.171875, :width 1428.6719999999998, :height 2020.5359999999998}, :rects ({:x1 259.016357421875, :y1 1367.171875, :x2 1260.509521484375, :y2 1391.171875, :width 1428.6719999999998, :height 2020.5359999999998}), :page 11}, :content {:text "When writing C++, you should also avoid using program styles such as void* whenever possible."}, :properties {:color "yellow"}} {:id #uuid "63b3bcba-5b86-41c6-acc8-9184dddc45ef", :page 11, :position {:bounding {:x1 0, :y1 190, :x2 1255.84375, :y2 1471.5, :width 1428.6719999999998, :height 2020.5359999999998}, :rects ({:x1 0, :y1 190, :x2 0, :y2 210, :width 1428.6719999999998, :height 2020.5359999999998} {:x1 171.578125, :y1 1407.328125, :x2 1255.84375, :y2 1431.328125, :width 1428.6719999999998, :height 2020.5359999999998} {:x1 172.796875, :y1 1447.5, :x2 835.3104248046875, :y2 1471.5, :width 1428.6719999999998, :height 2020.5359999999998}), :page 11}, :content {:text "When you have to use C, you should pay attention to the use of extern \"C\", separate the C language code from the C++ code, and then unify the link, for instance:"}, :properties {:color "yellow"}} {:id #uuid "63b3bdd4-99bf-4437-8109-a7592ee603fa", :page 13, :position {:bounding {:x1 172.796875, :y1 1333.890625, :x2 973.8712768554688, :y2 1368.890625, :width 1428.6719999999998, :height 2020.5359999999998}, :rects ({:x1 172.796875, :y1 1333.890625, :x2 973.8712768554688, :y2 1368.890625, :width 1428.6719999999998, :height 2020.5359999999998}), :page 13}, :content {:text "Chapter 02: Language Usability Enhancements"}, :properties {:color "red"}} {:id #uuid "63b568ac-9ca0-44ae-940e-edfe6e860794", :page 13, :position {:bounding {:x1 153.59375, :y1 1454.109375, :x2 325.0090026855469, :y2 1480.109375, :width 1269.9306666666666, :height 1796.032}, :rects ({:x1 153.59375, :y1 1454.109375, :x2 325.0090026855469, :y2 1480.109375, :width 1269.9306666666666, :height 1796.032}), :page 13}, :content {:text "2.1 Constants"}, :properties {:color "yellow"}} {:id #uuid "63b568fc-da8b-49f1-ad7e-278373483f34", :page 13, :position {:bounding {:x1 153.59375, :y1 1523.546875, :x2 226.81222534179688, :y2 1544.546875, :width 1269.9306666666666, :height 1796.032}, :rects ({:x1 153.59375, :y1 1523.546875, :x2 226.81222534179688, :y2 1544.546875, :width 1269.9306666666666, :height 1796.032}), :page 13}, :content {:text "nullptr"}, :properties {:color "purple"}} {:id #uuid "63b56927-d9be-497c-a7fa-ea5979b5d8ca", :page 13, :position {:bounding {:x1 0, :y1 462, :x2 1115.78125, :y2 1645, :width 1269.9306666666666, :height 1796.032}, :rects ({:x1 0, :y1 462, :x2 0, :y2 482, :width 1269.9306666666666, :height 1796.032} {:x1 196.09375, :y1 1588.296875, :x2 1115.78125, :y2 1609.546875, :width 1269.9306666666666, :height 1796.032} {:x1 153.59375, :y1 1624, :x2 765.309814453125, :y2 1645, :width 1269.9306666666666, :height 1796.032}), :page 13}, :content {:text "The purpose of nullptr appears to replace NULL. In a sense, traditional C++ treats NULL and 0 as the same thing, depending on how the compiler defines NULL"}, :properties {:color "yellow"}} {:id #uuid "63b56941-8c59-4a5b-9105-14482610f973", :page 14, :position {:bounding {:x1 196.09375, :y1 207.4375, :x2 839.7853393554688, :y2 228.6875, :width 1269.9306666666666, :height 1796.032}, :rects ({:x1 196.09375, :y1 207.4375, :x2 839.7853393554688, :y2 228.6875, :width 1269.9306666666666, :height 1796.032}), :page 14}, :content {:text "C++ does not allow to implicitly convert void * to other types."}, :properties {:color "yellow"}} {:id #uuid "63b56c5c-c2ea-4c68-aedb-c0d43c3ac51e", :page 14, :position {:bounding {:x1 0, :y1 174, :x2 1119.8421630859375, :y2 774.078125, :width 1269.9306666666666, :height 1796.032}, :rects ({:x1 0, :y1 174, :x2 0, :y2 194, :width 1269.9306666666666, :height 1796.032} {:x1 0, :y1 190, :x2 0, :y2 210, :width 1269.9306666666666, :height 1796.032} {:x1 196.09375, :y1 681.65625, :x2 1119.8421630859375, :y2 702.90625, :width 1269.9306666666666, :height 1796.032} {:x1 153.59375, :y1 717.359375, :x2 1117.1048583984375, :y2 738.609375, :width 1269.9306666666666, :height 1796.032} {:x1 153.59375, :y1 753.078125, :x2 965.181640625, :y2 774.078125, :width 1269.9306666666666, :height 1796.032}), :page 14}, :content {:text "To solve this problem, C++11 introduced the nullptr keyword, which is specifically used to distinguish null pointers, 0. The type of nullptr is nullptr_t, which can be implicitly converted to any pointer or member pointer type, and can be compared equally or unequally with them."}, :properties {:color "red"}} {:id #uuid "63b56e27-4097-48d9-b238-678ba1411163", :page 15, :position {:bounding {:x1 0, :y1 174, :x2 1117.0943603515625, :y2 682.375, :width 1269.9306666666666, :height 1796.032}, :rects ({:x1 0, :y1 174, :x2 0, :y2 194, :width 1269.9306666666666, :height 1796.032} {:x1 153.59375, :y1 625.671875, :x2 1117.0943603515625, :y2 646.921875, :width 1269.9306666666666, :height 1796.032} {:x1 153.59375, :y1 661.375, :x2 316.89593505859375, :y2 682.375, :width 1269.9306666666666, :height 1796.032}), :page 15}, :content {:text "In simple terms, decltype is used for type derivation, and std::is_same is used to compare the equality of the two types. "}, :properties {:color "yellow"}} {:id #uuid "63b56e44-4f13-4a99-a51e-2d70ff0a510f", :page 15, :position {:bounding {:x1 153.59375, :y1 741.421875, :x2 257.16229248046875, :y2 762.421875, :width 1269.9306666666666, :height 1796.032}, :rects ({:x1 153.59375, :y1 741.421875, :x2 257.16229248046875, :y2 762.421875, :width 1269.9306666666666, :height 1796.032}), :page 15}, :content {:text "constexpr"}, :properties {:color "purple"}} {:id #uuid "63b57226-29a2-4d3e-8b2e-49ccacca75de", :page 16, :position {:bounding {:x1 0, :y1 206, :x2 1119.2486572265625, :y2 1032.03125, :width 1269.9306666666666, :height 1796.032}, :rects ({:x1 0, :y1 206, :x2 0, :y2 226, :width 1269.9306666666666, :height 1796.032} {:x1 0, :y1 222, :x2 0, :y2 242, :width 1269.9306666666666, :height 1796.032} {:x1 0, :y1 238, :x2 0, :y2 258, :width 1269.9306666666666, :height 1796.032} {:x1 0, :y1 254, :x2 0, :y2 274, :width 1269.9306666666666, :height 1796.032} {:x1 0, :y1 270, :x2 0, :y2 290, :width 1269.9306666666666, :height 1796.032} {:x1 0, :y1 286, :x2 0, :y2 306, :width 1269.9306666666666, :height 1796.032} {:x1 196.09375, :y1 796.796875, :x2 1116.3165283203125, :y2 818.046875, :width 1269.9306666666666, :height 1796.032} {:x1 153.59375, :y1 832.5, :x2 1116.29736328125, :y2 853.75, :width 1269.9306666666666, :height 1796.032} {:x1 153.59375, :y1 868.21875, :x2 1116.905029296875, :y2 889.46875, :width 1269.9306666666666, :height 1796.032} {:x1 153.59375, :y1 903.921875, :x2 1116.29443359375, :y2 925.171875, :width 1269.9306666666666, :height 1796.032} {:x1 153.59375, :y1 939.625, :x2 1119.2486572265625, :y2 960.875, :width 1269.9306666666666, :height 1796.032} {:x1 153.59375, :y1 975.328125, :x2 1116.8677978515625, :y2 996.578125, :width 1269.9306666666666, :height 1796.032} {:x1 153.59375, :y1 1011.03125, :x2 533.5859375, :y2 1032.03125, :width 1269.9306666666666, :height 1796.032}), :page 16}, :content {:text "In the above example, char arr_4[len_2] may be confusing because len_2 has been defined as a constant. Why is char arr_4[len_2] still illegal? This is because the length of the array in the C++ standard must be a constant expression, and for len_2, this is a const constant, not a constant expression, so even if this behavior is supported by most compilers, but it is an illegal behavior, we need to use the constexpr feature introduced in C++11, which will be introduced next, to solve this problem; for arr_5, before C++98 The compiler cannot know that len_foo() actually returns a constant at runtime, which causes illegal production."}, :properties {:color "yellow"}} {:id #uuid "63b572c6-b0c8-4561-99be-e79cb7813b0e", :page 16, :position {:bounding {:x1 0, :y1 318, :x2 1063.1876220703125, :y2 1172.53125, :width 1269.9306666666666, :height 1796.032}, :rects ({:x1 0, :y1 318, :x2 0, :y2 338, :width 1269.9306666666666, :height 1796.032} {:x1 0, :y1 334, :x2 0, :y2 354, :width 1269.9306666666666, :height 1796.032} {:x1 206.734375, :y1 1080.109375, :x2 1063.1876220703125, :y2 1101.359375, :width 1269.9306666666666, :height 1796.032} {:x1 206.734375, :y1 1115.8125, :x2 1063.167236328125, :y2 1137.0625, :width 1269.9306666666666, :height 1796.032} {:x1 206.734375, :y1 1151.53125, :x2 559.500732421875, :y2 1172.53125, :width 1269.9306666666666, :height 1796.032}), :page 16}, :content {:text "Note that most compilers now have their compiler optimizations. Many illegal behaviors become legal under the compiler’s optimization. If you need to reproduce the error, you need to use the old version of the compiler."}, :properties {:color "green"}} {:id #uuid "63b572eb-bf87-43d4-9802-2262482eef37", :page 16, :position {:bounding {:x1 0, :y1 366, :x2 1116.726806640625, :y2 1277.5625, :width 1269.9306666666666, :height 1796.032}, :rects ({:x1 0, :y1 366, :x2 0, :y2 386, :width 1269.9306666666666, :height 1796.032} {:x1 196.09375, :y1 1220.609375, :x2 1116.726806640625, :y2 1241.859375, :width 1269.9306666666666, :height 1796.032} {:x1 152.828125, :y1 1256.3125, :x2 637.9190673828125, :y2 1277.5625, :width 1269.9306666666666, :height 1796.032}), :page 16}, :content {:text "C++11 provides constexpr to let the user explicitly declare that the function or object constructor will become a constant expression at compile time."}, :properties {:color "red"}} {:id #uuid "63b57378-5f7b-49cc-bde1-ae2d93b5ee90", :page 16, :position {:bounding {:x1 196.09375, :y1 1343.015625, :x2 730.73828125, :y2 1364.265625, :width 1269.9306666666666, :height 1796.032}, :rects ({:x1 196.09375, :y1 1343.015625, :x2 730.73828125, :y2 1364.265625, :width 1269.9306666666666, :height 1796.032}), :page 16}, :content {:text "In addition, the function of constexpr can use recursion:"}, :properties {:color "yellow"}} {:id #uuid "63b5745b-a1c1-47d4-b74f-69c806b698c8", :page 16, :position {:bounding {:x1 0, :y1 478, :x2 1119.2628173828125, :y2 1645, :width 1269.9306666666666, :height 1796.032}, :rects ({:x1 0, :y1 478, :x2 0, :y2 498, :width 1269.9306666666666, :height 1796.032} {:x1 0, :y1 494, :x2 0, :y2 514, :width 1269.9306666666666, :height 1796.032} {:x1 196.09375, :y1 1552.59375, :x2 1119.2628173828125, :y2 1573.59375, :width 1269.9306666666666, :height 1796.032} {:x1 153.59375, :y1 1588.296875, :x2 1118.4197998046875, :y2 1609.546875, :width 1269.9306666666666, :height 1796.032} {:x1 153.59375, :y1 1624, :x2 241.17962646484375, :y2 1645, :width 1269.9306666666666, :height 1796.032}), :page 16}, :content {:text "Starting with C++14, the constexpr function can use simple statements such as local variables, loops, and branches internally. For example, the following code cannot be compiled under the C++11 standard:"}, :properties {:color "blue"}} {:id #uuid "63b5748b-c032-4be0-9553-eaf90cd43aae", :page 17, :position {:bounding {:x1 196.09375, :y1 371.515625, :x2 1109.42236328125, :y2 392.515625, :width 1269.9306666666666, :height 1796.032}, :rects ({:x1 196.09375, :y1 371.515625, :x2 1109.42236328125, :y2 392.515625, :width 1269.9306666666666, :height 1796.032}), :page 17}, :content {:text "To do this, we can write a simplified version like this to make the function available from C++11:"}, :properties {:color "blue"}} {:id #uuid "63b574b9-d4ce-4230-bed1-1ca6205e48ef", :page 17, :position {:bounding {:x1 153.59375, :y1 597.234375, :x2 537.1802978515625, :y2 623.234375, :width 1269.9306666666666, :height 1796.032}, :rects ({:x1 153.59375, :y1 597.234375, :x2 537.1802978515625, :y2 623.234375, :width 1269.9306666666666, :height 1796.032}), :page 17}, :content {:text "2.2 Variables and initialization"}, :properties {:color "yellow"}} {:id #uuid "63b574ea-f0f6-4bc4-9513-c07d4b7badee", :page 17, :position {:bounding {:x1 153.59375, :y1 666.671875, :x2 243.34747314453125, :y2 687.671875, :width 1269.9306666666666, :height 1796.032}, :rects ({:x1 153.59375, :y1 666.671875, :x2 243.34747314453125, :y2 687.671875, :width 1269.9306666666666, :height 1796.032}), :page 17}, :content {:text "if-switch"}, :properties {:color "purple"}} {:id #uuid "63b6b8c9-4151-4bb3-8393-0adb69299b14", :page 18, :position {:bounding {:x1 120, :y1 520.578125, :x2 232.760009765625, :y2 536.578125, :width 992.1333333333332, :height 1403.1499999999999}, :rects ({:x1 120, :y1 520.578125, :x2 232.760009765625, :y2 536.578125, :width 992.1333333333332, :height 1403.1499999999999}), :page 18}, :content {:text "Initializer list"}, :properties {:color "purple"}} {:id #uuid "63b6baf0-3aa1-4ff0-a314-385039a6aed4", :page 20, :position {:bounding {:x1 153.59375, :y1 432.28125, :x2 357.37274169921875, :y2 453.28125, :width 1269.9306666666666, :height 1796.032}, :rects ({:x1 153.59375, :y1 432.28125, :x2 357.37274169921875, :y2 453.28125, :width 1269.9306666666666, :height 1796.032}), :page 20}, :content {:text "Structured binding"}, :properties {:color "purple"}} {:id #uuid "63ba2c5a-3a5e-4464-b30a-2c0afd168c57", :page 20, :position {:bounding {:x1 0, :y1 110, :x2 979.370849609375, :y2 609.109375, :width 1111.1893333333333, :height 1571.5279999999998}, :rects ({:x1 0, :y1 110, :x2 0, :y2 130, :width 1111.1893333333333, :height 1571.5279999999998} {:x1 0, :y1 126, :x2 0, :y2 146, :width 1111.1893333333333, :height 1571.5279999999998} {:x1 0, :y1 142, :x2 0, :y2 162, :width 1111.1893333333333, :height 1571.5279999999998} {:x1 0, :y1 158, :x2 0, :y2 178, :width 1111.1893333333333, :height 1571.5279999999998} {:x1 228.170166015625, :y1 465.140625, :x2 977.171142578125, :y2 484.140625, :width 1111.1893333333333, :height 1571.5279999999998} {:x1 134.390625, :y1 496.375, :x2 977.2578125, :y2 515.375, :width 1111.1893333333333, :height 1571.5279999999998} {:x1 134.390625, :y1 527.625, :x2 977.260986328125, :y2 546.625, :width 1111.1893333333333, :height 1571.5279999999998} {:x1 134.390625, :y1 558.859375, :x2 979.370849609375, :y2 577.859375, :width 1111.1893333333333, :height 1571.5279999999998} {:x1 133.71875, :y1 590.109375, :x2 509.04766845703125, :y2 609.109375, :width 1111.1893333333333, :height 1571.5279999999998}), :page 20}, :content {:text "In the chapter on containers, we will learn that C++11 has added a std::tuple container for constructing a tuple that encloses multiple return values. But the flaw is that C++11/14 does not provide a simple way to get and define the elements in the tuple from the tuple, although we can unpack the tuple using std::tie But we still have to be very clear about how many objects this tuple contains, what type of each object is, very troublesome."}, :properties {:color "green"}} {:id #uuid "63ba2f1d-0550-466b-86bb-35158608918e", :page 20, :position {:bounding {:x1 134.390625, :y1 1160.28125, :x2 337.677490234375, :y2 1182.28125, :width 1111.1893333333333, :height 1571.5279999999998}, :rects ({:x1 134.390625, :y1 1160.28125, :x2 337.677490234375, :y2 1182.28125, :width 1111.1893333333333, :height 1571.5279999999998}), :page 20}, :content {:text "2.3 Type inference"}, :properties {:color "yellow"}} {:id #uuid "63ba2f82-26f1-4d06-8ec6-c7b9186bfe99", :page 21, :position {:bounding {:x1 134.390625, :y1 135.875, :x2 175.6839599609375, :y2 154.875, :width 1111.1893333333333, :height 1571.5279999999998}, :rects ({:x1 134.390625, :y1 135.875, :x2 175.6839599609375, :y2 154.875, :width 1111.1893333333333, :height 1571.5279999999998}), :page 21}, :content {:text "auto"}, :properties {:color "purple"}} {:id #uuid "63ba2fd7-5bbd-4820-832b-0efbca2f472b", :page 21, :position {:bounding {:x1 171.578125, :y1 362.125, :x2 936.8712158203125, :y2 381.125, :width 1111.1893333333333, :height 1571.5279999999998}, :rects ({:x1 171.578125, :y1 362.125, :x2 936.8712158203125, :y2 381.125, :width 1111.1893333333333, :height 1571.5279999999998}), :page 21}, :content {:text "One of the most common and notable examples of type derivation using auto is the iterator"}, :properties {:color "red"}} {:id #uuid "63ba301f-099a-4a05-b655-e03e9f384b41", :page 22, :position {:bounding {:x1 171.578125, :y1 230.34375, :x2 941.5794677734375, :y2 249.34375, :width 1111.1893333333333, :height 1571.5279999999998}, :rects ({:x1 171.578125, :y1 230.34375, :x2 941.5794677734375, :y2 249.34375, :width 1111.1893333333333, :height 1571.5279999999998}), :page 22}, :content {:text "Since C++ 20, auto can even be used as function arguments. Consider the following example:"}, :properties {:color "yellow"}} {:id #uuid "63ba3082-1bf6-4b72-ae6f-bd3ee3714588", :page 22, :position {:bounding {:x1 134.390625, :y1 758.515625, :x2 212.810791015625, :y2 777.515625, :width 1111.1893333333333, :height 1571.5279999999998}, :rects ({:x1 134.390625, :y1 758.515625, :x2 212.810791015625, :y2 777.515625, :width 1111.1893333333333, :height 1571.5279999999998}), :page 22}, :content {:text "decltype"}, :properties {:color "purple"}} {:id #uuid "63ba309a-7ae9-414e-9509-7b0b256c627a", :page 22, :position {:bounding {:x1 0, :y1 238, :x2 980.414794921875, :y2 865.40625, :width 1111.1893333333333, :height 1571.5279999999998}, :rects ({:x1 0, :y1 238, :x2 0, :y2 258, :width 1111.1893333333333, :height 1571.5279999999998} {:x1 171.578125, :y1 815.15625, :x2 980.414794921875, :y2 834.15625, :width 1111.1893333333333, :height 1571.5279999999998} {:x1 134.390625, :y1 846.40625, :x2 423.828125, :y2 865.40625, :width 1111.1893333333333, :height 1571.5279999999998}), :page 22}, :content {:text "The decltype keyword is used to solve the defect that the auto keyword can only type the variable. Its usage is very similar to typeof:"}, :properties {:color "yellow"}} {:id #uuid "63ba30d4-fa6e-4d9d-9a8e-18626523dbea", :page 22, :position {:bounding {:x1 171.578125, :y1 972.859375, :x2 791.8142700195312, :y2 991.859375, :width 1111.1893333333333, :height 1571.5279999999998}, :rects ({:x1 171.578125, :y1 972.859375, :x2 791.8142700195312, :y2 991.859375, :width 1111.1893333333333, :height 1571.5279999999998}), :page 22}, :content {:text "Sometimes we may need to calculate the type of an expression, for example:"}, :properties {:color "yellow"}} {:id #uuid "63ba311d-fbed-42ae-be0e-9782d0994538", :page 23, :position {:bounding {:x1 171.578125, :y1 135.875, :x2 980.38671875, :y2 154.875, :width 1111.1893333333333, :height 1571.5279999999998}, :rects ({:x1 171.578125, :y1 135.875, :x2 980.38671875, :y2 154.875, :width 1111.1893333333333, :height 1571.5279999999998}), :page 23}, :content {:text "Among them, std::is_same<T, U> is used to determine whether the two types T and U are equal."}, :properties {:color "yellow"}} {:id #uuid "63ba3126-d25f-4fcc-8095-f28c18aed247", :page 23, :position {:bounding {:x1 134.390625, :y1 332.265625, :x2 304.4444885253906, :y2 351.265625, :width 1111.1893333333333, :height 1571.5279999999998}, :rects ({:x1 134.390625, :y1 332.265625, :x2 304.4444885253906, :y2 351.265625, :width 1111.1893333333333, :height 1571.5279999999998}), :page 23}, :content {:text "tail type inference"}, :properties {:color "purple"}} {:id #uuid "63ba389b-5f00-49c7-adcc-2cdce0795d0b", :page 23, :position {:bounding {:x1 0, :y1 270, :x2 976.7567138671875, :y2 878.796875, :width 1111.1893333333333, :height 1571.5279999999998}, :rects ({:x1 0, :y1 270, :x2 0, :y2 290, :width 1111.1893333333333, :height 1571.5279999999998} {:x1 171.578125, :y1 828.546875, :x2 976.7567138671875, :y2 847.546875, :width 1111.1893333333333, :height 1571.5279999999998} {:x1 134.390625, :y1 859.796875, :x2 325.518798828125, :y2 878.796875, :width 1111.1893333333333, :height 1571.5279999999998}), :page 23}, :content {:text "Such code is very ugly because the programmer must explicitly indicate the return type when using this template function."}, :properties {:color "yellow"}} {:id #uuid "63ba38bf-1fa8-4303-ae93-0e4249bca39c", :page 23, :position {:bounding {:x1 0, :y1 382, :x2 976.7532958984375, :y2 1174.859375, :width 1111.1893333333333, :height 1571.5279999999998}, :rects ({:x1 0, :y1 382, :x2 0, :y2 402, :width 1111.1893333333333, :height 1571.5279999999998} {:x1 651.2161865234375, :y1 1124.609375, :x2 976.7532958984375, :y2 1143.609375, :width 1111.1893333333333, :height 1571.5279999999998} {:x1 134.390625, :y1 1155.859375, :x2 615.2815551757812, :y2 1174.859375, :width 1111.1893333333333, :height 1571.5279999999998}), :page 23}, :content {:text "C++11 also introduces a trailing return type, which uses the auto keyword to post the return type:"}, :properties {:color "yellow"}} {:id #uuid "63ba3929-8b79-4bc3-a595-75510e8ba016", :page 24, :position {:bounding {:x1 134.390625, :y1 698.25, :x2 270.7167053222656, :y2 717.25, :width 1111.1893333333333, :height 1571.5279999999998}, :rects ({:x1 134.390625, :y1 698.25, :x2 270.7167053222656, :y2 717.25, :width 1111.1893333333333, :height 1571.5279999999998}), :page 24}, :content {:text "decltype(auto)"}, :properties {:color "purple"}} {:id #uuid "63ba3daa-de52-4bc2-83d7-b3b95c1d79dd", :page 25, :position {:bounding {:x1 134.390625, :y1 365.703125, :x2 310.7835693359375, :y2 387.703125, :width 1111.1893333333333, :height 1571.5279999999998}, :rects ({:x1 134.390625, :y1 365.703125, :x2 310.7835693359375, :y2 387.703125, :width 1111.1893333333333, :height 1571.5279999999998}), :page 25}, :content {:text "2.4 Control flow"}, :properties {:color "yellow"}} {:id #uuid "63ba3dba-dc15-4a44-a91d-5543ef562c72", :page 25, :position {:bounding {:x1 134.390625, :y1 424.59375, :x2 244.60238647460938, :y2 443.59375, :width 1111.1893333333333, :height 1571.5279999999998}, :rects ({:x1 134.390625, :y1 424.59375, :x2 244.60238647460938, :y2 443.59375, :width 1111.1893333333333, :height 1571.5279999999998}), :page 25}, :content {:text "if constexpr"}, :properties {:color "yellow"}} {:id #uuid "63ba42ce-4c7b-4526-842d-fe6182318404", :page 26, :position {:bounding {:x1 134.390625, :y1 237.796875, :x2 332.8258056640625, :y2 256.796875, :width 1111.1893333333333, :height 1571.5279999999998}, :rects ({:x1 134.390625, :y1 237.796875, :x2 332.8258056640625, :y2 256.796875, :width 1111.1893333333333, :height 1571.5279999999998}), :page 26}, :content {:text "Range-based for loop"}, :properties {:color "yellow"}} {:id #uuid "63ba4305-4410-4486-9921-b5ba5278bc8f", :page 26, :position {:bounding {:x1 134.390625, :y1 899.984375, :x2 286.9013977050781, :y2 921.984375, :width 1111.1893333333333, :height 1571.5279999999998}, :rects ({:x1 134.390625, :y1 899.984375, :x2 286.9013977050781, :y2 921.984375, :width 1111.1893333333333, :height 1571.5279999999998}), :page 26}, :content {:text "2.5 Templates"}, :properties {:color "yellow"}} {:id #uuid "63ba448a-acc9-47a5-9192-da94252e071b", :page 26, :position {:bounding {:x1 0, :y1 350, :x2 977.4638671875, :y2 1102.84375, :width 1111.1893333333333, :height 1571.5279999999998}, :rects ({:x1 0, :y1 350, :x2 0, :y2 370, :width 1111.1893333333333, :height 1571.5279999999998} {:x1 0, :y1 366, :x2 0, :y2 386, :width 1111.1893333333333, :height 1571.5279999999998} {:x1 0, :y1 382, :x2 0, :y2 402, :width 1111.1893333333333, :height 1571.5279999999998} {:x1 417.945556640625, :y1 990.109375, :x2 976.755615234375, :y2 1009.109375, :width 1111.1893333333333, :height 1571.5279999999998} {:x1 134.390625, :y1 1021.359375, :x2 977.2578125, :y2 1040.359375, :width 1111.1893333333333, :height 1571.5279999999998} {:x1 134.390625, :y1 1052.59375, :x2 977.4638671875, :y2 1071.59375, :width 1111.1893333333333, :height 1571.5279999999998} {:x1 134.390625, :y1 1083.84375, :x2 466.1109619140625, :y2 1102.84375, :width 1111.1893333333333, :height 1571.5279999999998}), :page 26}, :content {:text "he philosophy of the template is to throw all the problems that can be processed at compile time into the compile time, and only deal with those core dynamic services at runtime, to greatly optimize the performance of the runtime. Therefore, templates are also regarded by many as one of the black magic of C++."}, :properties {:color "purple"}} {:id #uuid "63ba4496-f350-4c87-8e8a-aa9a588b8ca5", :page 26, :position {:bounding {:x1 134.390625, :y1 1154.515625, :x2 296.3849182128906, :y2 1173.515625, :width 1111.1893333333333, :height 1571.5279999999998}, :rects ({:x1 134.390625, :y1 1154.515625, :x2 296.3849182128906, :y2 1173.515625, :width 1111.1893333333333, :height 1571.5279999999998}), :page 26}, :content {:text "Extern templates"}, :properties {:color "purple"}} {:id #uuid "63ba4640-3a11-40d8-bf24-4c530a374633", :page 26, :position {:bounding {:x1 171.578125, :y1 1211.171875, :x2 901.6064453125, :y2 1230.171875, :width 1111.1893333333333, :height 1571.5279999999998}, :rects ({:x1 171.578125, :y1 1211.171875, :x2 901.6064453125, :y2 1230.171875, :width 1111.1893333333333, :height 1571.5279999999998}), :page 26}, :content {:text "In traditional C++, templates are instantiated by the compiler only when they are used."}, :properties {:color "green"}} {:id #uuid "63ba47fc-efa3-4b83-b4f6-d725b8d98413", :page 27, :position {:bounding {:x1 134.390625, :y1 237.625, :x2 215.93905639648438, :y2 256.625, :width 1111.1893333333333, :height 1571.5279999999998}, :rects ({:x1 134.390625, :y1 237.625, :x2 215.93905639648438, :y2 256.625, :width 1111.1893333333333, :height 1571.5279999999998}), :page 27}, :content {:text "The “>”"}, :properties {:color "purple"}} {:id #uuid "63ba4869-7cfd-42f5-8e24-3ae0d30bb555", :page 27, :position {:bounding {:x1 134.390625, :y1 832.703125, :x2 328.2879638671875, :y2 851.703125, :width 1111.1893333333333, :height 1571.5279999999998}, :rects ({:x1 134.390625, :y1 832.703125, :x2 328.2879638671875, :y2 851.703125, :width 1111.1893333333333, :height 1571.5279999999998}), :page 27}, :content {:text "Type alias templates"}, :properties {:color "purple"}} {:id #uuid "63ba48a6-0fab-4684-98ad-af5e8629bf3e", :page 27, :position {:bounding {:x1 0, :y1 270, :x2 980.923828125, :y2 939.609375, :width 1111.1893333333333, :height 1571.5279999999998}, :rects ({:x1 0, :y1 270, :x2 0, :y2 290, :width 1111.1893333333333, :height 1571.5279999999998} {:x1 171.578125, :y1 889.359375, :x2 976.766845703125, :y2 908.359375, :width 1111.1893333333333, :height 1571.5279999999998} {:x1 130, :y1 920.609375, :x2 980.923828125, :y2 939.609375, :width 1111.1893333333333, :height 1571.5279999999998}), :page 27}, :content {:text "Before you understand the type alias template, you need to understand the difference between“template” and “type”. Carefully understand this sentence: Templates are used to generate types."}, :properties {:color "green"}} {:id #uuid "63ba4933-d6db-461c-bb6f-5fcf781a7d12", :page 27, :position {:bounding {:x1 0, :y1 478, :x2 976.7646484375, :y2 1439, :width 1111.1893333333333, :height 1571.5279999999998}, :rects ({:x1 0, :y1 478, :x2 0, :y2 498, :width 1111.1893333333333, :height 1571.5279999999998} {:x1 171.578125, :y1 1388.765625, :x2 976.7646484375, :y2 1407.765625, :width 1111.1893333333333, :height 1571.5279999999998} {:x1 134.390625, :y1 1420, :x2 454.515625, :y2 1439, :width 1111.1893333333333, :height 1571.5279999999998}), :page 27}, :content {:text "C++11 uses using to introduce the following form of writing, and at the same time supports the same effect as the traditional typedef:"}, :properties {:color "green"}} {:id #uuid "63ba4ae6-d6e5-4592-a821-8dbc49e8d0aa", :page 28, :position {:bounding {:x1 134.390625, :y1 548.0625, :x2 309.4454650878906, :y2 567.0625, :width 1111.1893333333333, :height 1571.5279999999998}, :rects ({:x1 134.390625, :y1 548.0625, :x2 309.4454650878906, :y2 567.0625, :width 1111.1893333333333, :height 1571.5279999999998}), :page 28}, :content {:text "Variadic templates"}, :properties {:color "purple"}} {:id #uuid "63ba4b32-0c3c-401e-a7a7-7c1a7a184f1a", :page 28, :position {:bounding {:x1 134.390625, :y1 759.1875, :x2 495.6544189453125, :y2 778.1875, :width 1111.1893333333333, :height 1571.5279999999998}, :rects ({:x1 134.390625, :y1 759.1875, :x2 495.6544189453125, :y2 778.1875, :width 1111.1893333333333, :height 1571.5279999999998}), :page 28}, :content {:text "template<typename... Ts> class Magic;"}, :properties {:color "green"}} {:id #uuid "63ba4be0-3601-4184-89e7-c0458ea55209", :page 29, :position {:bounding {:x1 134.390625, :y1 255.5625, :x2 886.178955078125, :y2 274.5625, :width 1111.1893333333333, :height 1571.5279999999998}, :rects ({:x1 134.390625, :y1 255.5625, :x2 886.178955078125, :y2 274.5625, :width 1111.1893333333333, :height 1571.5279999999998}), :page 29}, :content {:text "template<typename... Args> void printf(const std::string &str, Args... args);"}, :properties {:color "green"}} {:id #uuid "63ba4c1b-36c2-4075-9961-e33d1daa992a", :page 29, :position {:bounding {:x1 0, :y1 254, :x2 977.13330078125, :y2 823.890625, :width 1111.1893333333333, :height 1571.5279999999998}, :rects ({:x1 0, :y1 254, :x2 0, :y2 274, :width 1111.1893333333333, :height 1571.5279999999998} {:x1 171.578125, :y1 773.65625, :x2 977.13330078125, :y2 792.65625, :width 1111.1893333333333, :height 1571.5279999999998} {:x1 134.390625, :y1 804.890625, :x2 578.2297973632812, :y2 823.890625, :width 1111.1893333333333, :height 1571.5279999999998}), :page 29}, :content {:text "Second, the parameters are unpacked. So far there is no simple way to process the parameter package, but there are two classic processing methods:"}, :properties {:color "green"}} {:id #uuid "63ba4c33-88ec-4aaf-809a-fc96ade2c9b6", :page 29, :position {:bounding {:x1 171.578125, :y1 312.765625, :x2 863.18701171875, :y2 331.765625, :width 1111.1893333333333, :height 1571.5279999999998}, :rects ({:x1 171.578125, :y1 312.765625, :x2 863.18701171875, :y2 331.765625, :width 1111.1893333333333, :height 1571.5279999999998}), :page 29}, :content {:text "Then we define variable length template parameters, how to unpack the parameters?"}, :properties {:color "green"}} {:id #uuid "63ba4c35-f273-4f88-8b6f-a236d0826a4d", :page 29, :position {:bounding {:x1 171.578125, :y1 357.390625, :x2 722.463623046875, :y2 376.390625, :width 1111.1893333333333, :height 1571.5279999999998}, :rects ({:x1 171.578125, :y1 357.390625, :x2 722.463623046875, :y2 376.390625, :width 1111.1893333333333, :height 1571.5279999999998}), :page 29}, :content {:text "First, we can use sizeof... to calculate the number of arguments:"}, :properties {:color "green"}} {:id #uuid "63ba4c57-88a9-401f-b8d2-35b034248447", :page 29, :position {:bounding {:x1 171.578125, :y1 849.53125, :x2 461.736083984375, :y2 868.53125, :width 1111.1893333333333, :height 1571.5279999999998}, :rects ({:x1 171.578125, :y1 849.53125, :x2 461.736083984375, :y2 868.53125, :width 1111.1893333333333, :height 1571.5279999999998}), :page 29}, :content {:text "1. Recursive template function"}, :properties {:color "blue"}} {:id #uuid "63ba4e13-a35d-4efd-8efb-59f813dab4be", :page 30, :position {:bounding {:x1 171.578125, :y1 135.875, :x2 567.0907592773438, :y2 154.875, :width 1111.1893333333333, :height 1571.5279999999998}, :rects ({:x1 171.578125, :y1 135.875, :x2 567.0907592773438, :y2 154.875, :width 1111.1893333333333, :height 1571.5279999999998}), :page 30}, :content {:text "2. Variable parameter template expansion"}, :properties {:color "blue"}} {:id #uuid "63ba4e62-87e8-4aed-b9ad-df2b4aaac564", :page 30, :position {:bounding {:x1 0, :y1 30, :x2 976.7545166015625, :y2 230.75, :width 1111.1893333333333, :height 1571.5279999999998}, :rects ({:x1 0, :y1 30, :x2 0, :y2 50, :width 1111.1893333333333, :height 1571.5279999999998} {:x1 171.578125, :y1 180.5, :x2 976.7545166015625, :y2 199.5, :width 1111.1893333333333, :height 1571.5279999999998} {:x1 134.390625, :y1 211.75, :x2 308.7420349121094, :y2 230.75, :width 1111.1893333333333, :height 1571.5279999999998}), :page 30}, :content {:text "You should feel that this is very cumbersome. Added support for variable parameter template expansion in C++17, "}, :properties {:color "green"}} {:id #uuid "63ba4f7e-1e09-47c2-b843-1233ab2c5990", :page 30, :position {:bounding {:x1 171.578125, :y1 620.140625, :x2 414.4954833984375, :y2 639.140625, :width 1111.1893333333333, :height 1571.5279999999998}, :rects ({:x1 171.578125, :y1 620.140625, :x2 414.4954833984375, :y2 639.140625, :width 1111.1893333333333, :height 1571.5279999999998}), :page 30}, :content {:text "3. Initialize list expansion"}, :properties {:color "blue"}} {:id #uuid "63ba4fc7-e9bb-4d81-86b3-4a8fdce864e0", :page 30, :position {:bounding {:x1 0, :y1 222, :x2 977.270751953125, :y2 759.640625, :width 1111.1893333333333, :height 1571.5279999999998}, :rects ({:x1 0, :y1 222, :x2 0, :y2 242, :width 1111.1893333333333, :height 1571.5279999999998} {:x1 0, :y1 238, :x2 0, :y2 258, :width 1111.1893333333333, :height 1571.5279999999998} {:x1 171.578125, :y1 664.765625, :x2 977.270751953125, :y2 683.765625, :width 1111.1893333333333, :height 1571.5279999999998} {:x1 134.390625, :y1 696.015625, :x2 487.6044921875, :y2 715.015625, :width 1111.1893333333333, :height 1571.5279999999998} {:x1 171.578125, :y1 740.640625, :x2 861.84521484375, :y2 759.640625, :width 1111.1893333333333, :height 1571.5279999999998}), :page 30}, :content {:text "Recursive template functions are standard practice, but the obvious drawback is that you must define a function that terminates recursion. Here is a description of the black magic that is expanded using the initialization list:"}, :properties {:color "green"}}], :extra {:page 30}}